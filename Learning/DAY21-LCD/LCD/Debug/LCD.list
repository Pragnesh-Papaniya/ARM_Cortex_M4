
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  0800042c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  0800042c  0800042c  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800042c  0800042c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000434  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  08000444  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000444  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003e8  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000163  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00002590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db7f  00000000  00000000  0000264b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006cd  00000000  00000000  000101ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f568  00000000  00000000  00010897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fdff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  0005fe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0005ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000414 	.word	0x08000414

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08000414 	.word	0x08000414

080001d4 <main>:
void LCD_Init(void);
void delayMs(int delay);


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	LCD_Init();
 80001d8:	f000 f868 	bl	80002ac <LCD_Init>
	/* Loop forever */

	for(;;);
 80001dc:	bf00      	nop
 80001de:	e7fd      	b.n	80001dc <main+0x8>

080001e0 <GPIO_Init>:
}

void GPIO_Init(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0X06;
 80001e4:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <GPIO_Init+0x3c>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e8:	4a0c      	ldr	r2, [pc, #48]	@ (800021c <GPIO_Init+0x3c>)
 80001ea:	f043 0306 	orr.w	r3, r3, #6
 80001ee:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |=0X5400;
 80001f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000220 <GPIO_Init+0x40>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000220 <GPIO_Init+0x40>)
 80001f6:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR =0X00C; //SET EN AND RW LOW
 80001fc:	4b08      	ldr	r3, [pc, #32]	@ (8000220 <GPIO_Init+0x40>)
 80001fe:	220c      	movs	r2, #12
 8000200:	619a      	str	r2, [r3, #24]
	GPIOC->MODER |=0X00005555;
 8000202:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <GPIO_Init+0x44>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a07      	ldr	r2, [pc, #28]	@ (8000224 <GPIO_Init+0x44>)
 8000208:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 800020c:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000210:	6013      	str	r3, [r2, #0]



}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	40023800 	.word	0x40023800
 8000220:	40020400 	.word	0x40020400
 8000224:	40020800 	.word	0x40020800

08000228 <LCD_Command>:
void LCD_Command(unsigned char command)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	// RS=0  RW=0
	GPIOB->BSRR=(RS|RW)<<16;
 8000232:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <LCD_Command+0x34>)
 8000234:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000238:	619a      	str	r2, [r3, #24]
	GPIOC->ODR=command;
 800023a:	4a09      	ldr	r2, [pc, #36]	@ (8000260 <LCD_Command+0x38>)
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR=EN ; //ENABLE EN
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <LCD_Command+0x34>)
 8000242:	2280      	movs	r2, #128	@ 0x80
 8000244:	619a      	str	r2, [r3, #24]
	delayMs(0);
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f878 	bl	800033c <delayMs>
	GPIOB->BSRR=EN<<16 ; //clear EN
 800024c:	4b03      	ldr	r3, [pc, #12]	@ (800025c <LCD_Command+0x34>)
 800024e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000252:	619a      	str	r2, [r3, #24]
	//delayMs(30);

}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40020400 	.word	0x40020400
 8000260:	40020800 	.word	0x40020800

08000264 <LCD_Data>:

void LCD_Data(unsigned char data)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	//RS=1 ,RW=0
	GPIOB->BSRR=RS;
 800026e:	4b0d      	ldr	r3, [pc, #52]	@ (80002a4 <LCD_Data+0x40>)
 8000270:	2220      	movs	r2, #32
 8000272:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR=RW<<16;
 8000274:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <LCD_Data+0x40>)
 8000276:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800027a:	619a      	str	r2, [r3, #24]
	GPIOC->ODR=data;
 800027c:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <LCD_Data+0x44>)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR=EN ; //ENABLE EN
 8000282:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <LCD_Data+0x40>)
 8000284:	2280      	movs	r2, #128	@ 0x80
 8000286:	619a      	str	r2, [r3, #24]
	delayMs(30);
 8000288:	201e      	movs	r0, #30
 800028a:	f000 f857 	bl	800033c <delayMs>
	GPIOB->BSRR=EN<<16 ; //clear EN
 800028e:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <LCD_Data+0x40>)
 8000290:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000294:	619a      	str	r2, [r3, #24]
	delayMs(30);
 8000296:	201e      	movs	r0, #30
 8000298:	f000 f850 	bl	800033c <delayMs>



}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40020400 	.word	0x40020400
 80002a8:	40020800 	.word	0x40020800

080002ac <LCD_Init>:

void LCD_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	unsigned char i=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	71fb      	strb	r3, [r7, #7]

	GPIO_Init();
 80002b6:	f7ff ff93 	bl	80001e0 <GPIO_Init>
	LCD_Command(0x28); //select one line
 80002ba:	2028      	movs	r0, #40	@ 0x28
 80002bc:	f7ff ffb4 	bl	8000228 <LCD_Command>
	delayMs(15);
 80002c0:	200f      	movs	r0, #15
 80002c2:	f000 f83b 	bl	800033c <delayMs>
	LCD_Command(0x0c); //set b it data mode
 80002c6:	200c      	movs	r0, #12
 80002c8:	f7ff ffae 	bl	8000228 <LCD_Command>
	delayMs(15);
 80002cc:	200f      	movs	r0, #15
 80002ce:	f000 f835 	bl	800033c <delayMs>
	LCD_Command(0x06); //move the cursor right
 80002d2:	2006      	movs	r0, #6
 80002d4:	f7ff ffa8 	bl	8000228 <LCD_Command>
	delayMs(15);
 80002d8:	200f      	movs	r0, #15
 80002da:	f000 f82f 	bl	800033c <delayMs>
	LCD_Command(0x01); //clear screen move cursor home
 80002de:	2001      	movs	r0, #1
 80002e0:	f7ff ffa2 	bl	8000228 <LCD_Command>
	delayMs(15);
 80002e4:	200f      	movs	r0, #15
 80002e6:	f000 f829 	bl	800033c <delayMs>
	delayMs(5000);
 80002ea:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002ee:	f000 f825 	bl	800033c <delayMs>

	LCD_Command(0x80); //turn display
 80002f2:	2080      	movs	r0, #128	@ 0x80
 80002f4:	f7ff ff98 	bl	8000228 <LCD_Command>
	delayMs(15);
 80002f8:	200f      	movs	r0, #15
 80002fa:	f000 f81f 	bl	800033c <delayMs>
	while (Message[i]!='\0')
 80002fe:	e008      	b.n	8000312 <LCD_Init+0x66>
		{
			LCD_Data(Message[i]);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <LCD_Init+0x8c>)
 8000304:	5cd3      	ldrb	r3, [r2, r3]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ffac 	bl	8000264 <LCD_Data>
			i++;
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	3301      	adds	r3, #1
 8000310:	71fb      	strb	r3, [r7, #7]
	while (Message[i]!='\0')
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4a08      	ldr	r2, [pc, #32]	@ (8000338 <LCD_Init+0x8c>)
 8000316:	5cd3      	ldrb	r3, [r2, r3]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f1      	bne.n	8000300 <LCD_Init+0x54>
		}
		delayMs(50);
 800031c:	2032      	movs	r0, #50	@ 0x32
 800031e:	f000 f80d 	bl	800033c <delayMs>
		LCD_Command(0xC0); //turn display
 8000322:	20c0      	movs	r0, #192	@ 0xc0
 8000324:	f7ff ff80 	bl	8000228 <LCD_Command>
		delayMs(15);
 8000328:	200f      	movs	r0, #15
 800032a:	f000 f807 	bl	800033c <delayMs>

}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000

0800033c <delayMs>:
void delayMs(int delay)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	int i;
	for (;delay>0;delay--)
 8000344:	e00d      	b.n	8000362 <delayMs+0x26>
	{
		for(i=0;i<3195;i++)
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e002      	b.n	8000352 <delayMs+0x16>
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	f640 427a 	movw	r2, #3194	@ 0xc7a
 8000358:	4293      	cmp	r3, r2
 800035a:	ddf7      	ble.n	800034c <delayMs+0x10>
	for (;delay>0;delay--)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3b01      	subs	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	dcee      	bgt.n	8000346 <delayMs+0xa>
		{

		}
	}
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
	...

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	@ (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	@ (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	@ (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff13 	bl	80001d4 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80003c4:	2000002c 	.word	0x2000002c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	@ (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	@ (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
